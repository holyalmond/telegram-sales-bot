import asyncio
import logging
import sys
import os
import datetime

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, FSInputFile

from google_sheets import add_sale,remove_last_user_sale, get_report, get_month_summary, get_year_summary, get_top_products, export_sheet_xlsx

from config import BOT_TOKEN

dp = Dispatcher()

#### HANDLERS ####

@dp.message(CommandStart())
async def command_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂.\n–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")

@dp.message(Command("help"))
async def command_help(message: Message):
    await message.answer(
        "ü§ñ <b>–ë–æ—Ç —É—á—ë—Ç–∞ –ø—Ä–æ–¥–∞–∂</b>\n\n"
        "üìå <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üëâ <code>–ö–∞–ø—É—á–∏–Ω–æ 250</code>\n"
        "üëâ <code>–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω 145.50</code>\n\n"
        "–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ —Ü–µ–Ω—ã —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/report –î–î.–ú–ú.–ì–ì ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n"
        "/today ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/month_summary –ú–ú.–ì–ì ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü\n"
        "/year_summary –ì–ì–ì–ì ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –≥–æ–¥\n"
        "/top_products –ú–ú.–ì–ì ‚Äî —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ Excel\n"
        "/undo ‚Äî –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏\n\n"
        "üí° –í—Å–µ –ø—Ä–æ–¥–∞–∂–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google –¢–∞–±–ª–∏—Ü—É.",
        parse_mode="HTML"
    )

@dp.message(Command("report"))
async def command_report(message: Message, command: CommandObject):
    date = command.args

    if not date:
        await message.answer("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/report –î–î.–ú–ú.–ì–ì</code>", parse_mode="HTML")
        return

    try:
        datetime.datetime.strptime(date, "%d.%m.%y")
    except ValueError:
        await message.answer("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: <code>/report –î–î.–ú–ú.–ì–ì</code>", parse_mode="HTML")
        return
    
    sales, amount = get_report(date)
    await message.answer(f"üßæ –û—Ç—á—ë—Ç –∑–∞ {date}\n–ü—Ä–æ–¥–∞–∂: {sales}\n–°—É–º–º–∞: {amount}‚ÇΩ")

@dp.message(Command("today"))
async def command_today(message: Message):
    today = message.date.date().strftime("%d.%m.%y")
    sales, amount = get_report(today)
    await message.answer(f"üßæ –û—Ç—á—ë—Ç –∑–∞ {today}\n–ü—Ä–æ–¥–∞–∂: {sales}\n–°—É–º–º–∞: {amount}‚ÇΩ")

@dp.message(Command("month_summary"))
async def command_month_summary(message: Message, command: CommandObject):
    month = command.args

    if not month:
        await message.answer("üìÖ –£–∫–∞–∂–∏ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>/summary –ú–ú.–ì–ì</code>", parse_mode="HTML")
        return

    try:
        datetime.datetime.strptime(month, "%m.%y")
    except ValueError:
        await message.answer("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ü—Ä–∏–º–µ—Ä: <code>/summary –ú–ú.–ì–ì</code>", parse_mode="HTML")
        return
    
    sales, amount = get_month_summary(month)
    await message.answer(f"üßæ –û—Ç—á—ë—Ç –∑–∞ {month}\n–ü—Ä–æ–¥–∞–∂: {sales}\n–°—É–º–º–∞: {amount}‚ÇΩ")

@dp.message(Command("year_summary"))
async def command_year_summary(message: Message, command: CommandObject):
    year = command.args
    if len(str(year)) != 4 or not str(year).isdigit():
        await message.answer("‚ùó –£–∫–∞–∂–∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–≥–≥–≥–≥</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/year_summary 2025</code>", parse_mode="HTML")
        return
    
    sales, amount = get_year_summary(year)

    if sales == 0:
        await message.answer(f"üìÖ –ó–∞ {year} –≥–æ–¥ –ø—Ä–æ–¥–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer(f"üìä <b>–û—Ç—á—ë—Ç –∑–∞ {year} –≥–æ–¥</b>\n–ü—Ä–æ–¥–∞–∂: <b>{sales}</b>\n–°—É–º–º–∞: <b>{amount:.2f}‚ÇΩ</b>", parse_mode="HTML")

@dp.message(Command("export"))
async def command_export(message: Message):
    await message.answer("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É, –ø–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É...")

    file_path = export_sheet_xlsx()
    if file_path:
        document = FSInputFile(file_path, filename="SalesBot.xlsx")
        await message.answer_document(document=document, caption="üßæ –í–æ—Ç —Ç–≤–æ—è —Ç–∞–±–ª–∏—Ü–∞")
        os.remove(file_path)
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.message(Command("undo"))
async def command_undo(message: Message):
    success = remove_last_user_sale(message.from_user.id)
    if success:
        await message.answer("‚Ü©Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

@dp.message(Command("top_products"))
async def command_top(message: Message, command: CommandObject):
    month = command.args.strip() if command.args else None

    if month is not None:
        try:
            datetime.datetime.strptime(month, "%m.%y")
        except ValueError:
            await message.answer("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ü—Ä–∏–º–µ—Ä: <code>/top_products –ú–ú.–ì–ì</code>", parse_mode="HTML")
            return
    
    top = get_top_products(month)

    if not top or top is None:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    result = "üèÜ <b>–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤</b>:\n\n"
    for i, (product, count) in enumerate(top, 1):
        result += f"{i}. {product} ‚Äî {count} —à—Ç.\n"

    await message.answer(result, parse_mode="HTML")

@dp.message()
async def handle_message(message: Message):
    text = message.text.strip()
    if " " not in text:
        await message.answer("‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ö–∞–ø—É—á–∏–Ω–æ 250")
        return

    *product_parts, price_str = text.split()
    product = " ".join(product_parts)
    price_str = price_str.replace(",", ".")

    try:
        price = float(price_str)
    except ValueError:
        await message.answer("‚ùó–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    date = message.date.date().strftime("%d.%m.%y")
    time = message.date.time().strftime("%H:%M")
    user_id = message.from_user.id
    name = message.from_user.first_name

    add_sale(date, time, product, price, user_id, name)
    await message.reply(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {product} - {price}‚ÇΩ")

#### START ####

async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())